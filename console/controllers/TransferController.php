<?php

/**
 * Created by PhpStorm.
 * User: ssj
 * Date: 16-1-12
 * Time: 上午5:40
 */

namespace console\controllers;

use frontend\models\History;
use frontend\models\Seed;
use frontend\models\SeedEvent;
use frontend\models\SeedOperationRecord;
use frontend\models\User;
use frontend\models\UserQuery;
use Yii;
use yii\console\Controller;
use yii\db\Connection;

class TransferController extends Controller
{
    /** @var Connection $fdb */
    private $fdb = null;
    /** @var Connection $db */
    private $db;
    public function beforeAction($action)
    {
        $this->fdb = Yii::$app->mysql;
        $this->db = Yii::$app->db;
        return parent::beforeAction($action); // TODO: Change the autogenerated stub
    }

    public function actionIndex()
    {
        $this->actionUser();
        $this->actionSeed();
        $this->actionHistory();
        $this->actionOperation();
    }

    public function actionUser()
    {
        User::deleteAll();
        $this->fdb->createCommand('DELETE FROM ngpt_ngpt_user')->query();
        //获取所有的User
        $offset = 0;
        $limit = 1000;
        QUERY:

        $sql = <<<SQL
SELECT * FROM ngpt_ngpt_users LIMIT $limit OFFSET $offset;
SQL;
        $res = $this->fdb->createCommand($sql)->queryAll();

        foreach ($res as $ouser) {
            $user = new User();
            $user->stat_up = $ouser['uploaded'];
            $user->stat_down = $ouser['downloaded'];
            $user->real_up = $ouser['realup'];
            $user->real_down = $ouser['realdown'];
            $user->is_valid = $ouser['candownload'] == '1';
            $user->passkey = $ouser['passkey'];
            $user->discuz_user_id = $ouser['uid'];
            var_dump($ouser);
            if (!$user->insert()) {
                var_dump($user->errors);
                return;
            }

            //进行ngpt的数据迁移
            $msql = <<<SQL
INSERT INTO ngpt_ngpt_user(uid, passkey, candownload)
VALUES ({$ouser['uid']},"$user->passkey", $user->is_valid);
SQL;
            $res = $this->fdb->createCommand($msql)->query();
            if (!$res) {
                var_dump($msql);
                return;
            }
        }

        if (count($res)) {
            $offset += $limit;
            goto QUERY;
        }
        return;
    }

    private function getCoe(&$gid)
    {
        if ($gid === null) {
            print_r('gid is null!');
            $gid = 0;
        }
        switch ($gid) {
            case 0:
                return 100;
            case 1:
                return 0;
            case 2:
                return 30;
            case 3:
                return 60;
            case 4:
                return 120;
            case 5:
                return 200;
        }
        return 100;
    }

    private function date($time)
    {
        return date('Y-m-d', $time);
    }
    public function actionSeed()
    {
        Seed::deleteAll();
        $this->fdb->createCommand('DELETE FROM ngpt_ngpt_seed')->query();
        $offset = 0;
        $limit = 1000;
        QUERY:
        $sql = <<<SQL
SELECT th.subject,s.*,g.*,i.*,s.tid as ttid FROM ngpt_ngpt_seeds s LEFT JOIN `ngpt_ngpt_seed_coeffs_info` g ON s.infohash=g.infohash
LEFT JOIN ngpt_ngpt_seed_display_info i ON i.infohash=s.infohash
LEFT JOIN ngpt_forum_thread th ON s.tid=th.tid
LIMIT $limit OFFSET $offset;
SQL;
        $res = $this->fdb->createCommand($sql)->queryAll();

        foreach ($res as $oseed) {
            if (empty($oseed['subject'])) {
                continue;
            }
            $seed = new Seed();
            $upcoef = $this->getCoe($oseed['upcoeffgid']);
            $downcoef = $this->getCoe($oseed['downcoeffgid']);
            $expire = $oseed['downcoeff_endtime'];
            if (empty($expire)) {
                $expire = 0;
            }
            $seed->coefArray = [[$upcoef, $downcoef, $expire]];
            $seed->info_hash = $oseed['infohash'];

            $detail = [];
            $idx = 1;
            while (!empty($oseed['field' . $idx])) {
                $detail['域' . $idx] = $oseed['field' . $idx];
                $idx++;
            }
            $seed->detail_info = json_encode($detail);

            $seed->traffic_up = $seed->traffic_down = $oseed['traffic'];
            $seed->full_name = $oseed['subject'];
            $seed->torrent_name = $oseed['filename'];
            $seed->completed_count = $oseed['finished'];
            $seed->file_count = $oseed['filecount'];
            $seed->file_size = $oseed['filesize'];
            $seed->type_id = $oseed['fid'];
            $seed->pub_time = $seed->create_time = $this->date($oseed['pubdate']);
            $seed->last_active_time = $this->date($oseed['lastactive']);
            $seed->live_time = $oseed['livetime'];

            /** @var User $publisher */
            $publisher = User::findOne(['discuz_user_id' => $oseed['publisheruid']]);
            $seed->publisher_user_id = $publisher->user_id;
            $seed->source_str = $oseed['sourcestr'];

            var_dump($seed->attributes);
            $seed->insert();

            if ($seed->hasErrors()) {
                var_dump($seed->errors);
                return;
            }

            //进行ngpt的数据迁移
            $seed_id = $seed->seed_id;
            $msql = <<<SQL
INSERT INTO ngpt_ngpt_seed(seed_id, tid, fid, publisheruid)
VALUES ($seed_id, {$oseed['ttid']}, {$oseed['fid']},{$oseed['publisheruid']});
SQL;
            $res = $this->fdb->createCommand($msql)->query();
            if (!$res) {
                var_dump($msql);
                return;
            }
        }
        if (count($res)) {
            $offset += $limit;
            goto QUERY;
        }
        return;
    }

    public function actionHistory()
    {
        History::deleteAll();
        SeedEvent::deleteAll();
        $offset = 0;
        $limit = 1000;
        QUERY:
        $sql = <<<SQL
        SELECT * FROM `ngpt_ngpt_history` LIMIT $limit OFFSET $offset;
SQL;
        $res = $this->fdb->createCommand($sql)->queryAll();

        foreach ($res as $ohis) {
            $his = new History();
            $his->record_date = $this->date($ohis['lastupdate']);

            /** @var User $user */
            $user = User::findOne(['discuz_user_id' => $ohis['uid']]);
            /** @var Seed $seed */
            $seed = Seed::findOne(['info_hash' => strtoupper($ohis['infohash'])]);

            if (!$seed) {
                continue;
            }
            $his->user_id = $user->user_id;
            $his->seed_id = $seed->seed_id;
            $his->stat_up = $ohis['uploaded'];
            $his->stat_down = $ohis['downloaded'];
            $his->real_up = $ohis['realup'];
            $his->real_down = $ohis['realdown'];

            $seed_event = new SeedEvent();
            $seed_event->user_id = $user->user_id;
            $seed_event->seed_id = $seed->seed_id;
            $seed_event->event_type = 'Downloaded';

            $res = $his->insert() && $seed_event->insert();
            if (!$res) {
                var_dump($his->errors);
                var_dump($seed_event->errors);
                return;
            }
            var_dump($his->attributes);
            var_dump($seed_event->attributes);

        }

        if (count($res)) {
            $offset += $limit;
            goto QUERY;
        }
        return;
    }

    public function actionOperation()
    {
        SeedOperationRecord::deleteAll();
        $offset = 0;
        $limit = 1000;
        QUERY:
        $sql = <<<SQL
        SELECT * FROM `ngpt_ngpt_history` LIMIT $limit OFFSET $offset;
SQL;
        $res = $this->fdb->createCommand($sql)->queryAll();

        foreach ($res as $oop) {
            $op = new SeedOperationRecord();

            /** @var User $admin */
            $admin = User::findOne(['discuz_user_id' => $oop['uid']]);
            /** @var Seed $seed */
            $seed = Seed::findOne(['info_hash' => strtoupper($oop['infohash'])]);

            if (empty($seed)) {
                continue;
            }

            $op->admin_id = $admin->user_id;
            $op->seed_id = $seed->seed_id;
            $op->operation_type = $oop['reason'];
            $op->detail_info = json_encode(
                [
                    'reason' => $oop['info']
                ]
            );
            $op->publisher_id = $seed->publisher_user_id;
            $op->create_time = $this->date($oop['opdate']);

            var_dump($op->attributes);
            if (!$op->insert()) {
                var_dump($op->errors);
                return;
            }
        }

        if (count($res)) {
            $offset += $limit;
            goto QUERY;
        }
        return;

    }
}
